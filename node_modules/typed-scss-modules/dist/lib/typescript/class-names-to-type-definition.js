"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = __importDefault(require("os"));
var reserved_words_1 = __importDefault(require("reserved-words"));
var core_1 = require("../core");
var prettier_1 = require("../prettier");
exports.EXPORT_TYPES = ["named", "default"];
exports.QUOTE_TYPES = ["single", "double"];
exports.exportTypeDefault = "named";
exports.exportTypeNameDefault = "ClassNames";
exports.exportTypeInterfaceDefault = "Styles";
exports.quoteTypeDefault = "single";
exports.bannerTypeDefault = "";
var classNameToNamedTypeDefinition = function (className) {
    return "export const " + className + ": string;";
};
var classNameToType = function (className, quoteType) {
    var quote = quoteType === "single" ? "'" : '"';
    return "  " + quote + className + quote + ": string;";
};
var isReservedKeyword = function (className) {
    return reserved_words_1.default.check(className, "es5", true) ||
        reserved_words_1.default.check(className, "es6", true);
};
var isValidName = function (className) {
    if (isReservedKeyword(className)) {
        core_1.alerts.warn("[SKIPPING] '" + className + "' is a reserved keyword (consider renaming or using --exportType default).");
        return false;
    }
    else if (/-/.test(className)) {
        core_1.alerts.warn("[SKIPPING] '" + className + "' contains dashes (consider using 'camelCase' or 'dashes' for --nameFormat or using --exportType default).");
        return false;
    }
    return true;
};
exports.classNamesToTypeDefinitions = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var typeDefinitions, _a, ClassNames, _b, Styles;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (!options.classNames.length) return [3 /*break*/, 4];
                typeDefinitions = void 0;
                _a = options.exportTypeName, ClassNames = _a === void 0 ? exports.exportTypeNameDefault : _a, _b = options.exportTypeInterface, Styles = _b === void 0 ? exports.exportTypeInterfaceDefault : _b;
                switch (options.exportType) {
                    case "default":
                        typeDefinitions = options.banner || "";
                        typeDefinitions += "export type " + Styles + " = {" + os_1.default.EOL;
                        typeDefinitions += options.classNames
                            .map(function (className) {
                            return classNameToType(className, options.quoteType || exports.quoteTypeDefault);
                        })
                            .join("" + os_1.default.EOL);
                        typeDefinitions += os_1.default.EOL + "};" + os_1.default.EOL + os_1.default.EOL;
                        typeDefinitions += "export type " + ClassNames + " = keyof " + Styles + ";" + os_1.default.EOL + os_1.default.EOL;
                        typeDefinitions += "declare const styles: " + Styles + ";" + os_1.default.EOL + os_1.default.EOL;
                        typeDefinitions += "export default styles;" + os_1.default.EOL;
                        break;
                    case "named":
                        typeDefinitions = options.classNames
                            .filter(isValidName)
                            .map(classNameToNamedTypeDefinition);
                        if (options.banner) {
                            typeDefinitions.unshift(options.banner);
                        }
                        // Separate all type definitions be a newline with a trailing newline.
                        typeDefinitions = typeDefinitions.join("" + os_1.default.EOL) + ("" + os_1.default.EOL);
                        break;
                }
                if (!typeDefinitions) return [3 /*break*/, 2];
                return [4 /*yield*/, prettier_1.attemptPrettier(typeDefinitions)];
            case 1: return [2 /*return*/, _c.sent()];
            case 2: return [2 /*return*/, null];
            case 3: return [3 /*break*/, 5];
            case 4: return [2 /*return*/, null];
            case 5: return [2 /*return*/];
        }
    });
}); };
