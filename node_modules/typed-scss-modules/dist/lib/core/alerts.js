"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = __importDefault(require("chalk"));
exports.LOG_LEVELS = ["verbose", "error", "info", "silent"];
exports.logLevelDefault = "verbose";
var currentLogLevel;
exports.setAlertsLogLevel = function (logLevel) {
    currentLogLevel = logLevel;
};
/**
 * wraps a callback and only calls it if currentLogLevel is undefined or included in permittedLogLevels
 * @param permittedLogLevels list of log levels. callbacks will only be called if current log level is listed here
 * @param cb callback
 */
var withLogLevelsRestriction = function (permittedLogLevels, cb) { return function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var shouldCall = !currentLogLevel || permittedLogLevels.includes(currentLogLevel);
    if (shouldCall) {
        return cb.apply(void 0, args);
    }
}; };
var error = withLogLevelsRestriction(["verbose", "error", "info"], function (message) { return console.log(chalk_1.default.red(message)); });
var warn = withLogLevelsRestriction(["verbose"], function (message) {
    return console.log(chalk_1.default.yellowBright(message));
});
var notice = withLogLevelsRestriction(["verbose", "info"], function (message) { return console.log(chalk_1.default.gray(message)); });
var info = withLogLevelsRestriction(["verbose", "info"], function (message) {
    return console.log(chalk_1.default.blueBright(message));
});
var success = withLogLevelsRestriction(["verbose", "info"], function (message) { return console.log(chalk_1.default.green(message)); });
exports.alerts = { error: error, warn: warn, notice: notice, info: info, success: success };
