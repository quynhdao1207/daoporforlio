#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var yargs_1 = __importDefault(require("yargs"));
var sass_1 = require("./sass");
var typescript_1 = require("./typescript");
var main_1 = require("./main");
var implementations_1 = require("./implementations");
var _a = yargs_1.default
    .usage("Generate .scss.d.ts from CSS module .scss files.\nUsage: $0 <glob pattern> [options]")
    .example("$0 src", "All .scss files at any level in the src directory")
    .example("$0 src/**/*.scss", "All .scss files at any level in the src directory")
    .example("$0 src/**/*.scss --watch", "Watch all .scss files at any level in the src directory that are added or changed")
    .example("$0 src/**/*.scss --includePaths src/core src/variables", 'Search the "core" and "variables" directory when resolving imports')
    .example("$0 src/**/*.scss --aliases.~name variables", 'Replace all imports for "~name" with "variables"')
    .example("$0 src/**/*.scss --aliasPrefixes.~ ./node_modules/", 'Replace the "~" prefix with "./node_modules/" for all imports beginning with "~"')
    .example("$0 src/**/*.scss --ignore **/secret.scss", 'Ignore any file names "secret.scss"')
    .example("$0 src/**/*.scss --implementation sass", "Use the Dart SASS package")
    .example("$0 src/**/*.scss -e default --quoteType double", "Use double quotes around class name definitions rather than single quotes.")
    .example("$0 src/**/*.scss --logLevel error", "Output only errors")
    .demandCommand(1)
    .option("aliases", {
    coerce: function (obj) { return obj; },
    alias: "a",
    describe: "Alias any import to any other value.",
})
    .option("aliasPrefixes", {
    coerce: function (obj) { return obj; },
    alias: "p",
    describe: "A prefix for any import to rewrite to another value.",
})
    .option("nameFormat", {
    choices: sass_1.NAME_FORMATS,
    default: sass_1.nameFormatDefault,
    alias: "n",
    describe: "The name format that should be used to transform class names.",
})
    .option("implementation", {
    choices: implementations_1.IMPLEMENTATIONS,
    default: implementations_1.getDefaultImplementation(),
    describe: "The SASS package to used to compile. This will default to the sass implementation you have installed.",
})
    .option("exportType", {
    choices: typescript_1.EXPORT_TYPES,
    default: typescript_1.exportTypeDefault,
    alias: "e",
    describe: "The type of export used for defining the type definitions.",
})
    .option("exportTypeName", {
    string: true,
    default: typescript_1.exportTypeNameDefault,
    describe: 'Set a custom type name for styles when --exportType is "default."',
})
    .option("exportTypeInterface", {
    string: true,
    default: typescript_1.exportTypeInterfaceDefault,
    describe: 'Set a custom interface name for styles when --exportType is "default."',
})
    .option("watch", {
    boolean: true,
    default: false,
    alias: "w",
    describe: "Watch for added or changed files and (re-)generate the type definitions.",
})
    .option("ignoreInitial", {
    boolean: true,
    default: false,
    describe: "Skips the initial build when passing the watch flag.",
})
    .option("listDifferent", {
    boolean: true,
    default: false,
    alias: "l",
    describe: "List any type definitions that are different than those that would be generated.",
})
    .option("includePaths", {
    array: true,
    string: true,
    alias: "i",
    describe: "Additional paths to include when trying to resolve imports.",
})
    .option("ignore", {
    string: true,
    array: true,
    default: [],
    describe: "Add a pattern or an array of glob patterns to exclude matches.",
})
    .options("quoteType", {
    string: true,
    choices: typescript_1.QUOTE_TYPES,
    default: typescript_1.quoteTypeDefault,
    alias: "q",
    describe: "Specify the quote type so that generated files adhere to your TypeScript rules.",
})
    .options("updateStaleOnly", {
    boolean: true,
    default: false,
    alias: "u",
    describe: "Overwrite generated files only if the source file has more recent changes.",
})
    .option("logLevel", {
    string: true,
    choices: typescript_1.LOG_LEVELS,
    default: typescript_1.logLevelDefault,
    alias: "L",
    describe: "Verbosity level of console output",
})
    .options("banner", {
    string: true,
    default: typescript_1.bannerTypeDefault,
    describe: "Inserts text at the top of every output file for documentation purposes.",
}).argv, patterns = _a._, rest = __rest(_a, ["_"]);
main_1.main(patterns[0], __assign({}, rest));
